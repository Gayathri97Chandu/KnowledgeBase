--------------------------------------------------------------------
-- Load script for the LAERTES relational model (extension to the OHDSI Standard Vocabulary)
--
--
-- Authors: Richard D Boyce, Jeremy Jao, Erica Voss
-- 2014/2015
--
-- NOTE: The 'tablefunc' extension must be created on the schema that
-- you run this script against. 
--
-- 1) install the extension (e.g., Ubuntu package postgresql-contrib-9.3)
-- 2) Open the schema in pgadmin and run:
--
--     CREATE EXTENSION tablefunc
--
----------------------------
-- USAGE:
-- 1) Edit integratedSources.conf and the run the script
--    'mergeCountsFromIntegratedSources.py'. This creates the files
--    uniq_drug_hoi_relationships.csv and drug-hoi-evidence-data.tsv

-- 2) load uniq_drug_hoi_relationships.csv, drug-hoi-evidence-data.tsv,
--    and ohdsiTest3.psql to the /mnt/vol1/inbound folder on the OHDSI
--    dev server.

-- 3) ssh to the OHDSI dev server, change to the /mnt/vol1/inbound folder
--    and run:
--    nohup psql -U <user name> -h 127.0.0.1 -W -d vocabularyv5 < ohdsiTest3.psql

-- 4) Wait - could take more than a couple of hours. Check nohup.out for progress

-- Converted by db_converter

\echo 'Setting up transaction'
START TRANSACTION;
SET standard_conforming_strings=off;
SET escape_string_warning=off;
SET CONSTRAINTS ALL DEFERRED;

\echo 'Dropping tables and views'
DROP MATERIALIZED VIEW IF EXISTS drug_HOI_evidence_view; 
--REFRESH MATERIALIZED VIEW drug_HOI_evidence_view  WITH NO DATA; 
DROP TABLE IF EXISTS drug_HOI_evidence; -- TODO: change the evidence_types to hold literature, product label, pharmacovigilance, EHR. Right now it just repeats the 'title' in the evidence_sources table
DROP TABLE IF EXISTS drug_HOI_relationship;
DROP TABLE IF EXISTS evidence_sources;
DROP TABLE IF EXISTS LAERTES_SUMMARY;

\echo 'Creating tables'
CREATE TABLE evidence_sources (
    id serial,
    title text ,
    description text,
    contributer text,
    creator text,
    creation_date date NOT NULL , -- 'Date that the source was created. For example, if the source was created in 2010 but added to the knowledge base in 2014, the creation date would be 2010',
    rights text,
    source text,
    PRIMARY KEY (id)
);

CREATE TABLE drug_HOI_relationship (
    id varchar(50) PRIMARY KEY,
    drug integer,
    RxNorm_drug text,
    HOI integer,
    SNOMED_HOI text
);

CREATE TABLE drug_HOI_evidence (
    id serial PRIMARY KEY,
    drug_HOI_relationship text,
    evidence_type text,
    modality boolean,
    evidence_source_code_id integer ,
    statistic_value numeric NOT NULL, -- 'For literature-like (e.g., PubMed abstracts, product labeling) sources this holds the count of the number of items of the evidence type present in the evidence base from that source (several rules are used to derive the counts, see documentation on the knowledge-base wiki). From signal detection sources, the result of applying the algorithm indicated in the evidence_type column is shown.' ,
    evidence_linkout text,
    statistic_type text,
    FOREIGN KEY (drug_HOI_relationship) REFERENCES drug_HOI_relationship (id),
    FOREIGN KEY(evidence_source_code_id) REFERENCES evidence_sources(id)
);

CREATE TABLE LU_HOI_DEF (
	ID serial			PRIMARY KEY,
	HOI_CONCEPT_ID			INTEGER,
	HOI_CONCEPT_NAME		TEXT,
	SNOMED_CODE			INTEGER,
	DESCRIPTION			TEXT,
	CONCEPT_ID			INTEGER,
	DEFINITION_NAME			TEXT
)

CREATE TABLE LU_DRUG_HOI_DEF (
	ID serial			PRIMARY KEY,
	HOI_CONCEPT_ID		INTEGER,
	HOI_CONCEPT_NAME	TEXT,
	DRUG_CONCEPT_ID		INTEGER,
	DRUG_CONCEPT_NAME	TEXT,
	GROUND_TRUTH		INTEGER
)

CREATE TABLE LAERTES_SUMMARY (
	id serial 				PRIMARY KEY,
	REPORT_ORDER			INTEGER,
	REPORT_NAME				TEXT,
	INGREDIENT_ID			INTEGER,
	INGREDIENT				TEXT,
	CLINICAL_DRUG_ID		INTEGER,
	CLINICAL_DRUG			TEXT,
	HOI_ID					INTEGER,
	HOI						TEXT,
	CT_COUNT				NUMERIC,
	CASE_COUNT				NUMERIC,
	OTHER_COUNT				NUMERIC,
	SPLICER_COUNT			NUMERIC,
	EU_SPLICER_COUNT		NUMERIC,
	SEMMEDDB_CT_COUNT		NUMERIC,
	SEMMEDDB_CASE_COUNT		NUMERIC,
	SEMMEDDB_NEG_CT_COUNT	NUMERIC,
	SEMMEDDB_NEG_CASE_COUNT	NUMERIC,
	EB05					NUMERIC,
	EBGM					NUMERIC,
	AERS_REPORT_COUNT		NUMERIC
);

\echo 'Inserting evidence_sources data from inline data'
INSERT INTO evidence_sources 
VALUES (1,'EU_SPC_ADR','Adverse drug events extracted from European product labeling (SmPCs)','WHO','WHO','2014-06-16','',''),
       (2,'US_SPL_ADR','Adverse drug reactions extracted from United States product labeling','SPLICER','Jon Duke','2014-06-16','',''),
       (3,'MEDLINE_MeSH','DEPRECATED (see more specific types) MeSH tagged titles and abstracts in MEDLINE','Patrick Ryan','National Library of Medicine','2014-06-17','',''),
       (4,'MEDLINE_SemMedDB','DEPRECATED (see more specific types) Titles and abstracts in MEDLINE processed with Metamap and SemRep','Richard Boyce','National Library of Medicine','2014-06-17','',''), 
       (5, 'FDA Adverse Event Reporting System', 'Spontaneous reports and signals from FAERS up to QX of 20XX', 'Jeremy Jao', 'FDA', '2014-09-09', '',''),
       (6,'MEDLINE_MeSH Case Reports','MeSH processed titles and abstracts for CASE REPORTS in MEDLINE','Richard Boyce','National Library of Medicine','2014-12-15','',''),
       (7,'MEDLINE_MeSH Clinical Trial','MeSH processed titles and abstracts for CLINICAL TRIALS in MEDLINE','Richard Boyce','National Library of Medicine','2014-12-15','',''),
       (8,'MEDLINE_MeSH Other','MeSH processed titles and abstracts for things other than case reports or clinical trials in MEDLINE','Richard Boyce','National Library of Medicine','2014-12-15','',''),
       (9,'MEDLINE_SemMedDB Case Reports','SemMedDB processed titles and abstracts for CASE REPORTS in MEDLINE','Richard Boyce','National Library of Medicine','2014-06-01','',''),
       (10,'MEDLINE_SemMedDB Clinical Trial','SemMedDB processed titles and abstracts for CLINICAL TRIALS in MEDLINE','Richard Boyce','National Library of Medicine','2014-06-01','',''),
       (11,'MEDLINE_SemMedDB Other','SemMedDB processed titles and abstracts for things other than case reports or clinical trials in MEDLINE','Richard Boyce','National Library of Medicine','2014-06-01','','');

COMMIT;

\echo 'Starting transaction'
START TRANSACTION;

\echo 'Setting comments on table columns'
COMMENT ON COLUMN evidence_sources.title IS 'a short name for the evidence source. Same as http://purl.org/dc/elements/1.1/title';
COMMENT ON COLUMN evidence_sources.description IS 'Description of the evidence source. Same as http://purl.org/dc/elements/1.1/description';
COMMENT ON COLUMN evidence_sources.contributer IS 'Same as http://purl.org/dc/elements/1.1/contributor';
COMMENT ON COLUMN evidence_sources.creator IS 'Same as http://purl.org/dc/elements/1.1/creator';
COMMENT ON COLUMN evidence_sources.creation_date IS 'Date that the source was created. For example, if the source was created in 2010 but added to the knowledge base in 2014, the creation date would be 2010';
COMMENT ON COLUMN evidence_sources.rights IS 'Same as http://purl.org/dc/elements/1.1/rights';
COMMENT ON COLUMN evidence_sources.source IS 'The source from which this data was derived. Same as http://purl.org/dc/elements/1.1/source';

COMMENT ON COLUMN drug_HOI_relationship.drug IS 'OMOP/IMEDS Concept ID for the drug';
COMMENT ON COLUMN drug_HOI_relationship.RxNorm_drug IS 'RxNorm Preferred Term of the Drug';
COMMENT ON COLUMN drug_HOI_relationship.HOI IS 'OMOP/IMEDS Concept ID for the Health Outcome of Interest';
COMMENT ON COLUMN drug_HOI_relationship.SNOMED_HOI IS 'SNOMED preferred term of the Health Outcome of Interest';

COMMENT ON COLUMN drug_HOI_evidence.id IS 'primary key';
COMMENT ON COLUMN drug_HOI_evidence.drug_HOI_relationship IS 'foreign key to the drug_HOI_relationship id';
COMMENT ON COLUMN drug_HOI_evidence.evidence_type IS 'the type of evidence (literature, product label, pharmacovigilance, EHR)';
COMMENT ON COLUMN drug_HOI_evidence.modality IS 'Whether or not the relationship of evidence is to refute the assertion';
COMMENT ON COLUMN drug_HOI_evidence.evidence_source_code_id IS 'a code indicating the actual source of evidence (e.g., PubMed, US SPLs, EU SPC, VigiBase, etc)';
COMMENT ON COLUMN drug_HOI_evidence.statistic_value IS 'For literature-like (e.g., PubMed abstracts, product labeling) sources this holds the count of the number of items of the evidence type present in the evidence base from that source (several rules are used to derive the counts, see documentation on the knowledge-base wiki). From signal detection sources, the result of applying the algorithm indicated in the evidence_type column is shown.';
COMMENT ON COLUMN drug_HOI_evidence.evidence_linkout IS 'For literature-like (e.g., PubMed abstracts, product labeling), this holds a URL that will resolve to a query against the RDF endpoint for all resources used to generate the evidence_count. For signal detection sources, this holds a link to metadata on the algorithm and how it was applied to arrive at the statistical value.';
COMMENT ON COLUMN drug_HOI_evidence.statistic_type IS 'For literature-like (e.g., PubMed abstracts, product labeling), and other count based methods this holds COUNT. For signal detection sources, this holds a string indicating the type of the result value (e.g., AERS_EBGM, AERS_EB05)';

\echo 'Altering table permissions '
ALTER TABLE drug_HOI_evidence
  OWNER TO rich;
GRANT ALL ON TABLE drug_HOI_evidence TO public;
GRANT ALL ON TABLE drug_HOI_evidence TO ohdsi;
GRANT ALL ON TABLE drug_HOI_evidence TO developer;
GRANT ALL ON TABLE drug_HOI_evidence TO administrator;


ALTER TABLE evidence_sources
  OWNER TO rich;
GRANT ALL ON TABLE evidence_sources TO public;
GRANT ALL ON TABLE evidence_sources TO ohdsi;
GRANT ALL ON TABLE evidence_sources TO administrator;
GRANT ALL ON TABLE evidence_sources TO developer;


ALTER TABLE drug_HOI_relationship
  OWNER TO rich;
GRANT ALL ON TABLE drug_HOI_relationship TO public;
GRANT ALL ON TABLE drug_HOI_relationship TO ohdsi;
GRANT ALL ON TABLE drug_HOI_relationship TO administrator;
GRANT ALL ON TABLE drug_HOI_relationship TO developer;

ALTER TABLE LAERTES_SUMMARY 
  OWNER TO rich;
GRANT ALL ON TABLE LAERTES_SUMMARY  TO public;
GRANT ALL ON TABLE LAERTES_SUMMARY  TO ohdsi;
GRANT ALL ON TABLE LAERTES_SUMMARY  TO administrator;
GRANT ALL ON TABLE LAERTES_SUMMARY  TO developer;

COMMIT;

\echo 'Starting transaction'
START TRANSACTION;
\echo 'Loading data into drug_HOI_relationship from file '
\copy drug_HOI_relationship from 'uniq_drug_hoi_relationships.csv' DELIMITER '|' CSV;
COMMIT;

\echo 'Starting transaction'
START TRANSACTION;
\echo 'Loading data into drug_HOI_evidence from file '
\copy drug_HOI_evidence from 'drug-hoi-evidence-data.tsv' DELIMITER '\t' CSV;
COMMIT;

\echo 'Starting transaction'
START TRANSACTION;
\echo 'Loading data into lookup file that defines drugs and HOIs '
\copy LU_DRUG_HOI_DEF from 'LU_DRUG_HOI_DEF.csv' DELIMITER ',' CSV HEADER;
COMMIT;

\echo 'Starting transaction'
START TRANSACTION;
\echo 'Loading data into lookup file that defines HOIs '
\copy LU_HOI_DEF from 'LU_DRUG_HOI.csv' DELIMITER ',' CSV HEADER;
COMMIT;

-- creates a view representing a pivot table of the
-- drug_hoi_relationship table. This table is intended to be useful
-- for users of the Standard Vocabulary
\echo 'Starting transaction'
START TRANSACTION;

\echo 'Creating drug_HOI_evidence_view as a materialized view'
CREATE MATERIALIZED VIEW drug_HOI_evidence_view AS
SELECT * 
FROM 
        (
  	 SELECT * FROM drug_hoi_relationship
	) as drugs
        NATURAL FULL JOIN
	(
          SELECT * 
	   FROM
		(select * from crosstab(
			'select
			   drug_hoi_relationship,
			   evidence_type,
			   statistic_value
			 from drug_hoi_evidence
			 where modality = true
			 order by 1',
			'select distinct evidence_type
			 from drug_hoi_evidence
			 order by 1'
		  ) as stats (
			id text,
			aers_eb05 numeric,
			aers_ebgm numeric,
			aers_report_count numeric,
			medline_mesh_clin_trial_count numeric,
			medline_mesh_case_report_count numeric,
			medline_mesh_other_count numeric,
			medline_semmed_clin_trial_count numeric,
			medline_semmed_case_report_count numeric,
			spl_eu_spc_count numeric,				
			spl_splicer_count numeric								
	 	)
 	      ) as stats
  	 ) as pos_modality_stats
         NATURAL FULL JOIN 
         (	    
           SELECT * 
    	   FROM
             (select * from crosstab(
    			'select
    			   drug_hoi_relationship,
    			   evidence_type,
    			   statistic_value
    			 from drug_hoi_evidence
    			 where modality = false and evidence_source_code_id in (9,10)
    			 order by 1',
    			'select distinct evidence_type
    			 from drug_hoi_evidence
    			 where evidence_source_code_id in (9,10)
    			 order by 1'
    	          ) as neg_stats (
    			id text,
    			neg_medline_semmed_clin_trial_count numeric,
    			neg_medline_semmed_case_report_count numeric
    	       )
    	     ) as neg_stats
    	 ) as neg_modality_stats
    	 NATURAL FULL JOIN
    	 (
           SELECT * 
    	   FROM
            (select * from crosstab(
    			'select
    			    drug_hoi_relationship,
    			    evidence_type,
    			    evidence_linkout
    			 from drug_hoi_evidence
    			 where modality = true
    			 order by 1',
    			'select distinct evidence_type
    			from drug_hoi_evidence
    			order by 1'
    	     ) as links (
    			id text,
    			aers_eb05_link text,
    			aers_ebgm_link text,
    			aers_report_link text,
    			medline_mesh_clin_trial_link text,
    			medline_mesh_case_report_link text,
    			medline_mesh_other_link text,
    			medline_semmed_clin_trial_link text,
    			medline_semmed_case_report_link text,
    			spl_eu_spc_link text,
    			spl_splicer_link text
    	    )
    	  ) as links
       ) AS drill_down_links
      NATURAL FULL JOIN
      (
       SELECT * 
       FROM
         (select * from crosstab(
    		'select
    		 drug_hoi_relationship,
    		 evidence_type,
    		 evidence_linkout
    		 from drug_hoi_evidence
    		 where modality = false and evidence_source_code_id in (9,10)
    		 order by 1',
    		'select distinct evidence_type
    		 from drug_hoi_evidence
    		 where evidence_source_code_id in (9,10)
    		 order by 1'
    	      ) as neg_modality_links (
    		id text,
    		neg_medline_semmed_clin_trial_link text,
    		neg_medline_semmed_case_report_link text
    	     )
       ) as neg_links
    ) as neg_modality_links;
COMMIT;

\echo 'Starting transaction'
START TRANSACTION;
\echo 'Altering privileges on drug_HOI_evidence_view'
GRANT ALL PRIVILEGES ON drug_HOI_evidence_view TO administrator;
GRANT ALL PRIVILEGES ON drug_HOI_evidence_view TO public;
GRANT ALL PRIVILEGES ON drug_HOI_evidence_view TO ohdsi;
GRANT ALL PRIVILEGES ON drug_HOI_evidence_view TO developer;
COMMIT;


--LAERTES SUMMARY QUERY
\echo 'Starting transaction'
START TRANSACTION;
\echo 'Inserting data into the drug rollup table LAERTES_SUMMARY'
WITH CTE_TRANSLATE AS (
	SELECT v.*,
		c.CONCEPT_ID AS INGREDIENT_ID, 
		c.CONCEPT_NAME AS INGREDIENT_NAME,
		CASE WHEN c.CONCEPT_ID IS NULL THEN 0 ELSE 1 END INGREDIENT_EXISTS,
		c2.CONCEPT_ID AS CLINICAL_DRUG_ID, 
		c2.CONCEPT_NAME AS CLINICAL_DRUG_NAME,
		CASE WHEN c2.CONCEPT_ID IS NULL THEN 0 ELSE 1 END CLINICAL_DRUG_EXISTS 
	FROM drug_hoi_evidence_view V
		/*ROLL DOWN TO INGREDIENTS*/
		LEFT OUTER JOIN CONCEPT_ANCESTOR ca
			ON ca.DESCENDANT_CONCEPT_ID = v.DRUG
			AND ca.ANCESTOR_CONCEPT_ID IN (
				SELECT DISTINCT CONCEPT_ID
				FROM CONCEPT
				WHERE VOCABULARY_ID = 'RxNorm'
				AND CONCEPT_CLASS_ID = 'Ingredient'
				AND INVALID_REASON IS NULL
			)
		LEFT OUTER JOIN CONCEPT c
			ON c.CONCEPT_ID = ca.ANCESTOR_CONCEPT_ID
		/*ROLL UP TO CLINICAL DRUG*/
		LEFT OUTER JOIN CONCEPT_ANCESTOR ca2
			ON ca2.DESCENDANT_CONCEPT_ID = v.DRUG
			AND ca2.ANCESTOR_CONCEPT_ID IN (
				SELECT DISTINCT CONCEPT_ID
				FROM CONCEPT
				WHERE VOCABULARY_ID = 'RxNorm'
				AND CONCEPT_CLASS_ID = 'Clinical Drug'
				AND INVALID_REASON IS NULL
			)
		LEFT OUTER JOIN CONCEPT c2
			ON c2.CONCEPT_ID = ca2.ANCESTOR_CONCEPT_ID
), 
CTE_REPORT_1 AS (
	SELECT 1 AS REPORT_ORDER, 
		CAST('Stratified by ingredient' AS TEXT) as report_name,
		INGREDIENT_ID AS INGREDIENT_ID, 
		INGREDIENT_NAME AS INGREDIENT, 
		cast(null as integer) as clinical_drug_id, 
		cast(null as varchar(1)) as clinical_drug, 
		cast(null as integer) as hoi_id, 
		cast(null as varchar(1)) as hoi, 
		sum(medline_mesh_clin_trial_count) as ct_count, -- Ingredient-based
		sum(medline_mesh_case_report_count) as case_count, -- Ingredient-based
		sum(medline_mesh_other_count) as other_count, -- Ingredient-based
		sum(spl_splicer_count) as splicer_count, -- Drug-based
		sum(spl_eu_spc_count) AS EU_splicer_count,
		sum(medline_semmed_clin_trial_count) AS SemMedDB_CT_COUNT,
		sum(medline_semmed_case_report_count) AS SemMedDB_CASE_COUNT,
		sum(neg_medline_semmed_clin_trial_count) AS SemMedDB_Neg_CT_COUNT,
		sum(neg_medline_semmed_case_report_count) AS SemMedDB_Neg_CASE_COUNT,
		avg(aers_eb05) as eb05, -- Ingredient-based
		avg(aers_ebgm) as ebgm, -- Ingredient-based
		sum(aers_report_count) as aers_report_count-- Ingredient-based
	FROM CTE_TRANSLATE
	WHERE INGREDIENT_EXISTS = 1
	GROUP BY INGREDIENT_ID, INGREDIENT_NAME
), 
CTE_REPORT_2 AS (
	SELECT 2 AS REPORT_ORDER, 
		CAST('Stratified by ingredient and HOI' AS text) as report_name,
		INGREDIENT_ID AS INGREDIENT_ID, 
		INGREDIENT_NAME AS INGREDIENT, 
		cast(null as integer) as clinical_drug_id, 
		cast(null as varchar(1)) as clinical_drug, 
		HOI as hoi_id, 
		SNOMED_HOI as hoi, 
		sum(medline_mesh_clin_trial_count) as ct_count, -- Ingredient-based
		sum(medline_mesh_case_report_count) as case_count, -- Ingredient-based
		sum(medline_mesh_other_count) as other_count, -- Ingredient-based
		sum(spl_splicer_count) as splicer_count, -- Drug-based
		sum(spl_eu_spc_count) AS EU_splicer_count,
		sum(medline_semmed_clin_trial_count) AS SemMedDB_CT_COUNT,
		sum(medline_semmed_case_report_count) AS SemMedDB_CASE_COUNT,
		sum(neg_medline_semmed_clin_trial_count) AS SemMedDB_Neg_CT_COUNT,
		sum(neg_medline_semmed_case_report_count) AS SemMedDB_Neg_CASE_COUNT,
		avg(aers_eb05) as eb05, -- Ingredient-based
		avg(aers_ebgm) as ebgm, -- Ingredient-based
		sum(aers_report_count) as aers_report_count-- Ingredient-based
	FROM CTE_TRANSLATE
	WHERE INGREDIENT_EXISTS = 1
	GROUP BY INGREDIENT_ID, INGREDIENT_NAME, HOI, SNOMED_HOI 
), 
CTE_REPORT_3 AS (
	SELECT 3 AS REPORT_ORDER, 
		CAST('Stratified by ingredient and clinical drug' AS text) as report_name,
		INGREDIENT_ID AS INGREDIENT_ID, 
		INGREDIENT_NAME AS INGREDIENT, 
		CLINICAL_DRUG_ID as clinical_drug_id, 
		CLINICAL_DRUG_NAME as clinical_drug, 
		cast(null as integer) as hoi_id, 
		cast(null as varchar(1)) as hoi, 
		sum(medline_mesh_clin_trial_count) as ct_count, -- Ingredient-based
		sum(medline_mesh_case_report_count) as case_count, -- Ingredient-based
		sum(medline_mesh_other_count) as other_count, -- Ingredient-based
		sum(spl_splicer_count) as splicer_count, -- Drug-based
		sum(spl_eu_spc_count) AS EU_splicer_count,
		sum(medline_semmed_clin_trial_count) AS SemMedDB_CT_COUNT,
		sum(medline_semmed_case_report_count) AS SemMedDB_CASE_COUNT,
		sum(neg_medline_semmed_clin_trial_count) AS SemMedDB_Neg_CT_COUNT,
		sum(neg_medline_semmed_case_report_count) AS SemMedDB_Neg_CASE_COUNT,
		avg(aers_eb05) as eb05, -- Ingredient-based
		avg(aers_ebgm) as ebgm, -- Ingredient-based
		sum(aers_report_count) as aers_report_count-- Ingredient-based
	FROM CTE_TRANSLATE
	WHERE CLINICAL_DRUG_EXISTS = 1
	GROUP BY INGREDIENT_ID, INGREDIENT_NAME, CLINICAL_DRUG_ID, CLINICAL_DRUG_NAME
),
CTE_REPORT_4 AS (
	SELECT 4 AS REPORT_ORDER, 
		CAST('Full detail: ingredient, clinical drug, HOI' AS text) as report_name,
		INGREDIENT_ID AS INGREDIENT_ID, 
		INGREDIENT_NAME AS INGREDIENT, 
		CLINICAL_DRUG_ID as clinical_drug_id, 
		CLINICAL_DRUG_NAME as clinical_drug, 
		HOI as hoi_id, 
		SNOMED_HOI as hoi, 
		sum(medline_mesh_clin_trial_count) as ct_count, -- Ingredient-based
		sum(medline_mesh_case_report_count) as case_count, -- Ingredient-based
		sum(medline_mesh_other_count) as other_count, -- Ingredient-based
		sum(spl_splicer_count) as splicer_count, -- Drug-based
		sum(spl_eu_spc_count) AS EU_splicer_count,
		sum(medline_semmed_clin_trial_count) AS SemMedDB_CT_COUNT,
		sum(medline_semmed_case_report_count) AS SemMedDB_CASE_COUNT,
		sum(neg_medline_semmed_clin_trial_count) AS SemMedDB_Neg_CT_COUNT,
		sum(neg_medline_semmed_case_report_count) AS SemMedDB_Neg_CASE_COUNT,
		avg(aers_eb05) as eb05, -- Ingredient-based
		avg(aers_ebgm) as ebgm, -- Ingredient-based
		sum(aers_report_count) as aers_report_count-- Ingredient-based
	FROM CTE_TRANSLATE
	GROUP BY INGREDIENT_ID, INGREDIENT_NAME, CLINICAL_DRUG_ID, CLINICAL_DRUG_NAME, HOI, SNOMED_HOI 
)
INSERT INTO LAERTES_SUMMARY (REPORT_ORDER, REPORT_NAME, INGREDIENT_ID, INGREDIENT, CLINICAL_DRUG_ID, CLINICAL_DRUG, HOI_ID, 
	HOI, CT_COUNT, CASE_COUNT, OTHER_COUNT, SPLICER_COUNT, EU_SPLICER_COUNT, SEMMEDDB_CT_COUNT, SEMMEDDB_CASE_COUNT, SEMMEDDB_NEG_CT_COUNT,
	SEMMEDDB_NEG_CASE_COUNT, EB05, EBGM, AERS_REPORT_COUNT)
SELECT REPORT_ORDER, REPORT_NAME, INGREDIENT_ID, INGREDIENT, CLINICAL_DRUG_ID, CLINICAL_DRUG, HOI_ID, 
	HOI, CT_COUNT, CASE_COUNT, OTHER_COUNT, SPLICER_COUNT, EU_SPLICER_COUNT, SEMMEDDB_CT_COUNT, SEMMEDDB_CASE_COUNT, SEMMEDDB_NEG_CT_COUNT,
	SEMMEDDB_NEG_CASE_COUNT, EB05, EBGM, AERS_REPORT_COUNT
FROM (
	SELECT *
	FROM CTE_REPORT_1
	UNION
	SELECT *
	FROM CTE_REPORT_2
	UNION
	SELECT *
	FROM CTE_REPORT_3
	UNION
	SELECT *
	FROM CTE_REPORT_4
) all_reports
ORDER BY INGREDIENT_ID, REPORT_ORDER, CLINICAL_DRUG_ID, HOI_ID;

COMMIT;



-- DEPRECATED COMPONENT OF THE PIVOT TABLE drug_HOI_evidence_view
	-- NATURAL JOIN 
	-- (
	-- 	(select * from crosstab(
	-- 		'select
	-- 			drug_hoi_relationship,
	-- 			evidence_type,
	-- 			modality
	-- 			from drug_hoi_evidence
	-- 			order by 1',
	-- 			'select distinct evidence_type
	-- 			from drug_hoi_evidence
	-- 			order by 1'
	-- 		) as modality(
	-- 			id text,
	-- 			aers_eb05_modality boolean,
	-- 			aers_ebgm_modality boolean,
	-- 			aers_report_modality boolean,	   
	-- 			medline_mesh_clin_trial_modality boolean,
	-- 			medline_mesh_case_report_modality boolean,
	-- 			medline_mesh_other_modality boolean,
	-- 			spl_eu_spc_modality boolean,
	-- 			aers_report_count_modality boolean,
	-- 			spl_splicer_modality boolean
	-- 		)
	-- 	) as modality 

	-- NATURAL JOIN 
	-- (
	-- 	(select * from crosstab(
	-- 		'select
	-- 			drug_hoi_relationship,
	-- 			evidence_type,
	-- 			statistic_type
	-- 			from drug_hoi_evidence
	-- 			order by 1',
	-- 			'select distinct evidence_type
	-- 			from drug_hoi_evidence
	-- 			order by 1'
	-- 		) as statistic_type(
	-- 			id text,
	-- 			aers_eb05_statistic_type text,
	-- 			aers_ebgm_statistic_type text,
	-- 			aers_report_statistic_type text,	   
	-- 			medline_mesh_clin_trial_statistic_type text,
	-- 			medline_mesh_case_report_statistic_type text,
	-- 			medline_mesh_other_statistic_type text,
	-- 			spl_eu_spc_statistic_type text,
	-- 			aers_report_count_statistic_type text,
	-- 			spl_splicer_statistic_type text
	-- 		)
	-- 	) as statistic_type 

