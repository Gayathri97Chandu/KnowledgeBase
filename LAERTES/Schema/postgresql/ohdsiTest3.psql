--------------------------------------------------------------------
-- Load script for the LAERTES relational model (extension to the OHDSI Standard Vocabulary)
--
--
-- Authors: Richard D Boyce, Jeremy Jao, Erica Voss, Charles Kronk
-- 2014 - 2016
--
-- NOTE: The 'tablefunc' extension must be created on the schema that
-- you run this script against. 
--
-- 1) install the extension (e.g., Ubuntu package postgresql-contrib-9.3)
-- 2) Open the schema in pgadmin and run:
--
--     CREATE EXTENSION tablefunc
--
----------------------------
-- USAGE:
-- 1) Edit integratedSources.conf and the run the script
--    'mergeCountsFromIntegratedSources.py'. This creates the files
--    uniq_drug_hoi_relationships.csv and drug-hoi-evidence-data.tsv

-- 2) (if deploying on the release server)
--    load uniq_drug_hoi_relationships.csv, drug-hoi-evidence-data.tsv,
--    and ohdsiTest3.psql to the /mnt/vol1/inbound folder on the OHDSI
--    dev server.

-- 3)
--- (DEVELOPMENT --- NOTE: YOU HAVE TO CHANGE TO TABLE PERMISSIONS STATEMENTS FIRST -- SEE 'Altering table permissions' BELOW)
-- Within this folder run:
--    nohup psql -U <user name> -h 127.0.0.1 -W -d laertes_cdm < ohdsiTest3.psql

--- (RELEASE)
-- ssh to the OHDSI dev server, change to the /mnt/vol1/inbound folder
--    and run:
--    nohup psql -U <user name> -h 127.0.0.1 -W -d vocabularyv5 < ohdsiTest3.psql

-- 4) Wait - could take more than a couple of hours. Check nohup.out for progress

\echo 'Setting up transaction'
START TRANSACTION;
SET standard_conforming_strings=off;
SET escape_string_warning=off;
SET CONSTRAINTS ALL DEFERRED;

\echo 'Dropping tables and views'
DROP MATERIALIZED VIEW IF EXISTS drug_HOI_evidence_view; 
--REFRESH MATERIALIZED VIEW drug_HOI_evidence_view  WITH NO DATA; 
DROP TABLE IF EXISTS drug_HOI_evidence; -- TODO: change the evidence_types to hold literature, product label, pharmacovigilance, EHR. Right now it just repeats the 'title' in the evidence_sources table
DROP TABLE IF EXISTS drug_HOI_relationship;
DROP TABLE IF EXISTS evidence_sources;
DROP TABLE IF EXISTS LAERTES_SUMMARY;

\echo 'Creating tables'
CREATE TABLE evidence_sources (
    id serial,
    title text ,
    description text,
    contributer text,
    creator text,
    creation_date date NOT NULL, 
    rights text,
    source text,
    coverage_start_date date NOT NULL, 
    coverage_end_date date NOT NULL, 
    PRIMARY KEY (id)
);

CREATE TABLE drug_HOI_relationship (
    id varchar(50) PRIMARY KEY,
    drug integer,
    RxNorm_drug text,
    HOI integer,
    SNOMED_HOI text
);

CREATE TABLE drug_HOI_evidence (
    id serial PRIMARY KEY,
    drug_HOI_relationship text,
    evidence_type text,
    supports boolean,
    evidence_source_code_id integer ,
    statistic_value numeric, -- 'For literature-like (e.g., PubMed abstracts, product labeling) sources this holds the count of the number of items of the evidence type present in the evidence base from that source (several rules are used to derive the counts, see documentation on the knowledge-base wiki). From signal detection sources, the result of applying the algorithm indicated in the evidence_type column is shown.' ,
    evidence_linkout text,
    statistic_type text,
    FOREIGN KEY (drug_HOI_relationship) REFERENCES drug_HOI_relationship (id),
    FOREIGN KEY(evidence_source_code_id) REFERENCES evidence_sources(id)
);

CREATE TABLE LAERTES_SUMMARY (
	id serial 				PRIMARY KEY,
	REPORT_ORDER			INTEGER,
	REPORT_NAME				TEXT,
	INGREDIENT_ID			INTEGER,
	INGREDIENT				TEXT,
	CLINICAL_DRUG_ID		INTEGER,
	CLINICAL_DRUG			TEXT,
	HOI_ID					INTEGER,
	HOI						TEXT,
	MEDLINE_CT_COUNT				INTEGER,
	MEDLINE_CASE_COUNT				INTEGER,
	MEDLINE_OTHER_COUNT				INTEGER,
	CTD_CHEMICAL_DISEASE_COUNT   INTEGER,
	SPLICER_COUNT			INTEGER,
	EU_SPC_COUNT		INTEGER,
	SEMMEDDB_CT_COUNT		INTEGER,
	SEMMEDDB_CASE_COUNT		INTEGER,
	SEMMEDDB_OTHER_COUNT    INTEGER,
	SEMMEDDB_NEG_CT_COUNT	INTEGER,
	SEMMEDDB_NEG_CASE_COUNT	INTEGER,
	SEMMEDDB_NEG_OTHER_COUNT INTEGER,
	AERS_REPORT_COUNT		INTEGER,
	PRR					NUMERIC
);

\echo 'Inserting evidence_sources data from inline data'
INSERT INTO evidence_sources 
VALUES (1,'EU_SPC_ADR','Adverse drug events extracted from European product labeling (SmPCs)','IMI PROTECT','IMI PROTECT','2015-10-09','http://www.ohdsi.org/web/wiki/doku.php?id=documentation:software:webapi#the_laertes_evidence_service','','1900-01-01','2013-12-31'),
       (2,'US_SPL_ADR',' DEPRECATED (see more specific types) Adverse drug reactions extracted from United States product labeling','SPLICER','Jon Duke','2015-04-29','http://www.ohdsi.org/web/wiki/doku.php?id=documentation:software:webapi#the_laertes_evidence_service','','1900-01-01','1900-01-01'),
       (3,'MEDLINE_MeSH','DEPRECATED (see more specific types) MeSH tagged titles and abstracts in MEDLINE','Patrick Ryan','National Library of Medicine','2014-06-17','http://www.ohdsi.org/web/wiki/doku.php?id=documentation:software:webapi#the_laertes_evidence_service','','1900-01-01','1900-01-01'),
       (4,'MEDLINE_SemMedDB','DEPRECATED (see more specific types) Titles and abstracts in MEDLINE processed with Metamap and SemRep','Richard Boyce','National Library of Medicine','2014-06-17','http://www.ohdsi.org/web/wiki/doku.php?id=documentation:software:webapi#the_laertes_evidence_service','','1900-01-01','1900-01-01'), 
       (5, 'FDA Adverse Event Reporting System', 'Spontaneous reports and signals from FAERS up to Q2 of 2015', 'Lee Evans (LTS Computing LLC)', 'FDA', '2015-10-09', 'http://www.ohdsi.org/web/wiki/doku.php?id=documentation:software:webapi#the_laertes_evidence_service','','1900-01-01','2014-12-31'),
       (6,'MEDLINE_MeSH Case Reports','MeSH processed titles and abstracts for CASE REPORTS in MEDLINE','Richard Boyce','National Library of Medicine','2016-03-30','http://www.ohdsi.org/web/wiki/doku.php?id=documentation:software:webapi#the_laertes_evidence_service','','1900-01-01','2016-03-16'),
       (7,'MEDLINE_MeSH Clinical Trial','MeSH processed titles and abstracts for CLINICAL TRIALS in MEDLINE','Richard Boyce','National Library of Medicine','2016-03-30','http://www.ohdsi.org/web/wiki/doku.php?id=documentation:software:webapi#the_laertes_evidence_service','','1900-01-01','2016-03-16'),
       (8,'MEDLINE_MeSH Other','MeSH processed titles and abstracts for things other than case reports or clinical trials in MEDLINE','Richard Boyce','National Library of Medicine','2016-03-30','http://www.ohdsi.org/web/wiki/doku.php?id=documentation:software:webapi#the_laertes_evidence_service','','1900-01-01','2016-03-16'),
       (9,'MEDLINE_SemMedDB Case Reports','SemMedDB processed titles and abstracts for CASE REPORTS in MEDLINE','Richard Boyce','National Library of Medicine','2016-03-30','http://www.ohdsi.org/web/wiki/doku.php?id=documentation:software:webapi#the_laertes_evidence_service','','1900-01-01','2015-06-30'),
       (10,'MEDLINE_SemMedDB Clinical Trial','SemMedDB processed titles and abstracts for CLINICAL TRIALS in MEDLINE','Richard Boyce','National Library of Medicine','2016-03-30','http://www.ohdsi.org/web/wiki/doku.php?id=documentation:software:webapi#the_laertes_evidence_service','','1900-01-01','2015-06-30'),
       (11,'MEDLINE_SemMedDB Other','SemMedDB processed titles and abstracts for things other than case reports or clinical trials in MEDLINE','Richard Boyce','National Library of Medicine','2016-03-30','http://www.ohdsi.org/web/wiki/doku.php?id=documentation:software:webapi#the_laertes_evidence_service','','1900-01-01','2015-06-30'),
       (12,'US_SPL_ADR ADR OR POST-MARKETING','Adverse drug reactions extracted from the Adverse Reactions or Post Marketing section of United States product labeling','SPLICER','Jon Duke','2016-03-30','http://www.ohdsi.org/web/wiki/doku.php?id=documentation:software:webapi#the_laertes_evidence_service','','1900-01-01','2016-01-25'),
       (13,'US_SPL_ADR PRECAUTIONS','Adverse drug reactions extracted from the Precautions section of United States product labeling','SPLICER','Jon Duke','2016-03-30','http://www.ohdsi.org/web/wiki/doku.php?id=documentation:software:webapi#the_laertes_evidence_service','','1900-01-01','2016-01-25'),
       (14,'CTD Chemical-Disease','Chemical-disease associations mined from the literature as part of the CTD project','CTD_ChemicalDisease','Richard Boyce','2016-03-30','http://www.ohdsi.org/web/wiki/doku.php?id=documentation:software:webapi#the_laertes_evidence_service','','1900-01-01','2016-03-01') ;

COMMIT;

\echo 'Starting transaction'
START TRANSACTION;

\echo 'Setting comments on table columns'
COMMENT ON COLUMN evidence_sources.title IS 'a short name for the evidence source. Same as http://purl.org/dc/elements/1.1/title';
COMMENT ON COLUMN evidence_sources.description IS 'Description of the evidence source. Same as http://purl.org/dc/elements/1.1/description';
COMMENT ON COLUMN evidence_sources.contributer IS 'Same as http://purl.org/dc/elements/1.1/contributor';
COMMENT ON COLUMN evidence_sources.creator IS 'Same as http://purl.org/dc/elements/1.1/creator';
COMMENT ON COLUMN evidence_sources.creation_date IS 'Date that the source was created. For example, if the source was created in 2010 but added to the knowledge base in 2014, the creation date would be 2010';
COMMENT ON COLUMN evidence_sources.rights IS 'Same as http://purl.org/dc/elements/1.1/rights';
COMMENT ON COLUMN evidence_sources.source IS 'The source from which this data was derived. Same as http://purl.org/dc/elements/1.1/source';
COMMENT ON COLUMN evidence_sources.coverage_start_date IS 'The start date of coverage for the resource. Data can be trusted on or after this date and up to and including the coverage_end_date';
COMMENT ON COLUMN evidence_sources.coverage_end_date IS 'The date of coverage for the resource. Data can be trusted on or after the coverage_start_date date and up to and including this date';

COMMENT ON COLUMN drug_HOI_relationship.drug IS 'OMOP/IMEDS Concept ID for the drug';
COMMENT ON COLUMN drug_HOI_relationship.RxNorm_drug IS 'RxNorm Preferred Term of the Drug';
COMMENT ON COLUMN drug_HOI_relationship.HOI IS 'OMOP/IMEDS Concept ID for the Health Outcome of Interest';
COMMENT ON COLUMN drug_HOI_relationship.SNOMED_HOI IS 'SNOMED preferred term of the Health Outcome of Interest';

COMMENT ON COLUMN drug_HOI_evidence.id IS 'primary key';
COMMENT ON COLUMN drug_HOI_evidence.drug_HOI_relationship IS 'foreign key to the drug_HOI_relationship id';
COMMENT ON COLUMN drug_HOI_evidence.evidence_type IS 'the type of evidence (literature, product label, pharmacovigilance, EHR)';
COMMENT ON COLUMN drug_HOI_evidence.supports IS 'True if the evidence supports the drug-HOI association, False if the evidence refutes the drug-HOI assocation, Null if it not certain ';
COMMENT ON COLUMN drug_HOI_evidence.evidence_source_code_id IS 'a code indicating the actual source of evidence (e.g., PubMed, US SPLs, EU SPC, VigiBase, etc)';
COMMENT ON COLUMN drug_HOI_evidence.statistic_value IS 'For literature-like (e.g., PubMed abstracts, product labeling) sources this holds the count of the number of items of the evidence type present in the evidence base from that source (several rules are used to derive the counts, see documentation on the knowledge-base wiki). From signal detection sources, the result of applying the algorithm indicated in the evidence_type column is shown.';
COMMENT ON COLUMN drug_HOI_evidence.evidence_linkout IS 'For literature-like (e.g., PubMed abstracts, product labeling), this holds a URL that will resolve to a query against the RDF endpoint for all resources used to generate the evidence_count. For signal detection sources, this holds a link to metadata on the algorithm and how it was applied to arrive at the statistical value.';
COMMENT ON COLUMN drug_HOI_evidence.statistic_type IS 'For literature-like (e.g., PubMed abstracts, product labeling), and other count based methods this holds COUNT. For signal detection sources, this holds a string indicating the type of the result value (e.g., AERS_EBGM, AERS_EB05)';

COMMENT ON COLUMN LAERTES_SUMMARY.ID IS 'primary key';
COMMENT ON COLUMN LAERTES_SUMMARY.REPORT_ORDER IS 'there are several reports in this summary, this is an identifier for each report';
COMMENT ON COLUMN LAERTES_SUMMARY.AERS_REPORT_COUNT IS '';
COMMENT ON COLUMN LAERTES_SUMMARY.CLINICAL_DRUG IS 'if a clinical drug exists, the clinical drug name';
COMMENT ON COLUMN LAERTES_SUMMARY.CLINICAL_DRUG_ID IS 'if a clinical drug exists, the clinical drug CONCEPT_ID';
COMMENT ON COLUMN LAERTES_SUMMARY.CTD_CHEMICAL_DISEASE_COUNT IS '';
COMMENT ON COLUMN LAERTES_SUMMARY.EU_SPC_COUNT IS 'counts of SPCs that mention specific drugs and hois';
COMMENT ON COLUMN LAERTES_SUMMARY.HOI IS 'the HOI name, this is at the SNOMED level';
COMMENT ON COLUMN LAERTES_SUMMARY.HOI_ID IS 'the HOI CONCEPT_ID, this is at the SNOMED level';
COMMENT ON COLUMN LAERTES_SUMMARY.INGREDIENT IS 'a drug ingredient name';
COMMENT ON COLUMN LAERTES_SUMMARY.INGREDIENT_ID IS 'a drug ingredient CONCEPT_ID';
COMMENT ON COLUMN LAERTES_SUMMARY.MEDLINE_CASE_COUNT IS '';
COMMENT ON COLUMN LAERTES_SUMMARY.MEDLINE_CT_COUNT IS '';
COMMENT ON COLUMN LAERTES_SUMMARY.MEDLINE_OTHER_COUNT IS '';
COMMENT ON COLUMN LAERTES_SUMMARY.PRR IS '';
COMMENT ON COLUMN LAERTES_SUMMARY.REPORT_NAME IS 'there are several reports in this summary, this is a name of the report';
COMMENT ON COLUMN LAERTES_SUMMARY.SEMMEDDB_CASE_COUNT IS '';
COMMENT ON COLUMN LAERTES_SUMMARY.SEMMEDDB_CT_COUNT IS '';
COMMENT ON COLUMN LAERTES_SUMMARY.SEMMEDDB_OTHER_COUNT IS '';
COMMENT ON COLUMN LAERTES_SUMMARY.SEMMEDDB_NEG_CASE_COUNT IS '';
COMMENT ON COLUMN LAERTES_SUMMARY.SEMMEDDB_NEG_CT_COUNT IS '';
COMMENT ON COLUMN LAERTES_SUMMARY.SEMMEDDB_NEG_OTHER_COUNT IS '';
COMMENT ON COLUMN LAERTES_SUMMARY.SPLICER_COUNT IS 'counts of SPLs that mention specific drugs and hois';

\echo 'Altering table permissions '
---- !!!! UNCOMMENT THESE PERMISSIONS FOR RELEASE !!!! 
-- ALTER TABLE drug_HOI_evidence
--   OWNER TO rich;
-- GRANT ALL ON TABLE drug_HOI_evidence TO public;
-- GRANT ALL ON TABLE drug_HOI_evidence TO ohdsi;
-- GRANT ALL ON TABLE drug_HOI_evidence TO developer;
-- GRANT ALL ON TABLE drug_HOI_evidence TO administrator;

-- ALTER TABLE evidence_sources
--   OWNER TO rich;
-- GRANT ALL ON TABLE evidence_sources TO public;
-- GRANT ALL ON TABLE evidence_sources TO ohdsi;
-- GRANT ALL ON TABLE evidence_sources TO administrator;
-- GRANT ALL ON TABLE evidence_sources TO developer;

-- ALTER TABLE drug_HOI_relationship
--   OWNER TO rich;
-- GRANT ALL ON TABLE drug_HOI_relationship TO public;
-- GRANT ALL ON TABLE drug_HOI_relationship TO ohdsi;
-- GRANT ALL ON TABLE drug_HOI_relationship TO administrator;
-- GRANT ALL ON TABLE drug_HOI_relationship TO developer;

-- ALTER TABLE LAERTES_SUMMARY 
--   OWNER TO rich;
-- GRANT ALL ON TABLE LAERTES_SUMMARY  TO public;
-- GRANT ALL ON TABLE LAERTES_SUMMARY  TO ohdsi;
-- GRANT ALL ON TABLE LAERTES_SUMMARY  TO administrator;
-- GRANT ALL ON TABLE LAERTES_SUMMARY  TO developer;

---- !!!! UNCOMMENT THESE PERMISSIONS FOR DEVELOPMENT !!!!
ALTER TABLE drug_HOI_evidence
  OWNER TO rdb20;

ALTER TABLE evidence_sources
  OWNER TO rdb20;

ALTER TABLE drug_HOI_relationship
  OWNER TO rdb20;

ALTER TABLE LAERTES_SUMMARY 
  OWNER TO rdb20;

COMMIT;

\echo 'Starting transaction'
START TRANSACTION;
\echo 'Loading data into drug_HOI_relationship from file '
\copy drug_HOI_relationship from 'uniq_drug_hoi_relationships.csv' DELIMITER '|' CSV;
COMMIT;

\echo 'Starting transaction'
START TRANSACTION;
\echo 'Loading data into drug_HOI_evidence from file '
\copy  drug_HOI_evidence from 'drug-hoi-evidence-data.tsv' DELIMITER '\t' NULL '\\N' CSV;
COMMIT;

creates a view representing a pivot table of the
drug_hoi_relationship table. This table is intended to be useful
for users of the Standard Vocabulary
\echo 'Starting transaction'
START TRANSACTION;

\echo 'Creating drug_HOI_evidence_view as a materialized view'
CREATE MATERIALIZED VIEW drug_HOI_evidence_view AS
SELECT * 
FROM 
       (
  	 SELECT * FROM drug_hoi_relationship
	) as drugs
        NATURAL FULL JOIN
	(
          SELECT * 
	   FROM
		(select * from crosstab(
			'select
			   drug_hoi_relationship,
			   evidence_type,
			   statistic_value
			 from drug_hoi_evidence
			 where supports = true and evidence_source_code_id in (1,5,9,10,11,12,14)
			 order by 1',
			'select distinct evidence_type
			 from drug_hoi_evidence
 			 where evidence_source_code_id in (1,5,9,10,11,12,14)
			 order by 1'
		  ) as stats (
			id text,
			aers_report_count integer,
			aers_report_PRR numeric,
			ctd_chemical_disease_count integer,
			medline_semmed_clin_trial_count integer,
			medline_semmed_case_report_count integer,
			medline_semmed_other_count integer,		 
			spl_eu_spc_count integer,				
			spl_splicer_count integer								
	 	)
 	      ) as stats
  	 ) as pos_supports_stats
	 NATURAL FULL JOIN 
	 (
          SELECT * 
	   FROM
		(select * from crosstab(
			'select
			   drug_hoi_relationship,
			   evidence_type,
			   statistic_value
			 from drug_hoi_evidence
			 where supports is null and evidence_source_code_id in (6,7,8)
			 order by 1',
			'select distinct evidence_type
			 from drug_hoi_evidence
			 where  evidence_source_code_id in (6,7,8)
			 order by 1'
		  ) as stats (
			id text,
			medline_mesh_clin_trial_count integer,
			medline_mesh_case_report_count integer,
			medline_mesh_other_count integer		
	 	)
 	      ) as stats
  	 ) as null_supports_stats
         NATURAL FULL JOIN 
         (	    
           SELECT * 
    	   FROM
             (select * from crosstab(
    			'select
    			   drug_hoi_relationship,
    			   evidence_type,
    			   statistic_value
    			 from drug_hoi_evidence
    			 where supports = false and evidence_source_code_id in (9,10,11)
    			 order by 1',
    			'select distinct evidence_type
    			 from drug_hoi_evidence
    			 where evidence_source_code_id in (9,10,11)
    			 order by 1'
    	          ) as neg_stats (
    			id text,
    			neg_medline_semmed_clin_trial_count integer,
    			neg_medline_semmed_case_report_count integer,
			neg_medline_semmed_other_count integer
    	       )
    	     ) as neg_stats
    	 ) as neg_supports_stats
    	 NATURAL FULL JOIN
    	 (
           SELECT * 
    	   FROM
            (select * from crosstab(
    			'select
    			    drug_hoi_relationship,
    			    evidence_type,
    			    evidence_linkout
    			 from drug_hoi_evidence
    			 where supports = true and evidence_source_code_id in (1,5,9,10,11,12,14)
    			 order by 1',
    			'select distinct evidence_type
    			from drug_hoi_evidence
			where evidence_source_code_id in (1,5,9,10,11,12,14)	
    			order by 1'
    	     ) as links (
    			id text,
    			aers_report_count_link text,
			aers_report_PRR_link text,
			ctd_chemical_disease_link text,
    			medline_semmed_clin_trial_link text,
    			medline_semmed_case_report_link text,
			medline_semmed_other_link text,		 
    			spl_eu_spc_link text,
    			spl_splicer_link text
    	    )
    	  ) as links
       ) AS pos_drill_down_links
       NATURAL FULL JOIN
       (
	   SELECT * 
    	   FROM
            (select * from crosstab(
    			'select
    			    drug_hoi_relationship,
    			    evidence_type,
    			    evidence_linkout
    			 from drug_hoi_evidence
    			 where supports is null and evidence_source_code_id in (6,7,8)
    			 order by 1',
    			'select distinct evidence_type
    			from drug_hoi_evidence
			where evidence_source_code_id in (6,7,8)
    			order by 1'
    	     ) as links (
    			id text,
    			medline_mesh_clin_trial_link text,
    			medline_mesh_case_report_link text,
			medline_mesh_other_link text		 
    	    )
    	  ) as links
      ) AS null_drill_down_links
      NATURAL FULL JOIN
      (
       SELECT * 
       FROM
         (select * from crosstab(
    		'select
    		 drug_hoi_relationship,
    		 evidence_type,
    		 evidence_linkout
    		 from drug_hoi_evidence
    		 where supports = false and evidence_source_code_id in (9,10,11)
    		 order by 1',
    		'select distinct evidence_type
    		 from drug_hoi_evidence
    		 where evidence_source_code_id in (9,10,11)
    		 order by 1'
    	      ) as neg_supports_links (
    		id text,
    		neg_medline_semmed_clin_trial_link text,
    		neg_medline_semmed_case_report_link text,
		neg_medline_semmed_other_report_link text
    	     )
       ) as neg_links
    ) as neg_supports_links;
COMMIT;

\echo 'Starting transaction'
START TRANSACTION;
\echo 'Altering privileges on drug_HOI_evidence_view'
-- ---- !!!! UNCOMMENT THESE PERMISSIONS FOR RELEASE !!!! 
-- GRANT ALL PRIVILEGES ON drug_HOI_evidence_view TO administrator;
-- GRANT ALL PRIVILEGES ON drug_HOI_evidence_view TO public;
-- GRANT ALL PRIVILEGES ON drug_HOI_evidence_view TO ohdsi;
-- GRANT ALL PRIVILEGES ON drug_HOI_evidence_view TO developer;

-- ---- !!!! UNCOMMENT THESE PERMISSIONS FOR DEVELOPMENT !!!!
GRANT ALL PRIVILEGES ON drug_HOI_evidence_view TO rdb20;


COMMIT;


--LAERTES SUMMARY QUERY
\echo 'Starting transaction'
START TRANSACTION;
\echo 'Inserting data into the drug rollup table LAERTES_SUMMARY'
WITH CTE_TRANSLATE AS (
	SELECT v.*,
		c.CONCEPT_ID AS INGREDIENT_ID, 
		c.CONCEPT_NAME AS INGREDIENT_NAME,
		CASE WHEN c.CONCEPT_ID IS NULL THEN 0 ELSE 1 END INGREDIENT_EXISTS,
		c2.CONCEPT_ID AS CLINICAL_DRUG_ID, 
		c2.CONCEPT_NAME AS CLINICAL_DRUG_NAME,
		CASE WHEN c2.CONCEPT_ID IS NULL THEN 0 ELSE 1 END CLINICAL_DRUG_EXISTS 
	FROM drug_hoi_evidence_view V
		/*ROLL DOWN TO INGREDIENTS*/
		LEFT OUTER JOIN CONCEPT_ANCESTOR ca
			ON ca.DESCENDANT_CONCEPT_ID = v.DRUG
			AND ca.ANCESTOR_CONCEPT_ID IN (
				SELECT DISTINCT CONCEPT_ID
				FROM CONCEPT
				WHERE VOCABULARY_ID = 'RxNorm'
				AND CONCEPT_CLASS_ID = 'Ingredient'
				AND INVALID_REASON IS NULL
			)
		LEFT OUTER JOIN CONCEPT c
			ON c.CONCEPT_ID = ca.ANCESTOR_CONCEPT_ID
		/*ROLL UP TO CLINICAL DRUG*/
		LEFT OUTER JOIN CONCEPT_ANCESTOR ca2
			ON ca2.DESCENDANT_CONCEPT_ID = v.DRUG
			AND ca2.ANCESTOR_CONCEPT_ID IN (
				SELECT DISTINCT CONCEPT_ID
				FROM CONCEPT
				WHERE VOCABULARY_ID = 'RxNorm'
				AND CONCEPT_CLASS_ID = 'Clinical Drug'
				AND INVALID_REASON IS NULL
			)
		LEFT OUTER JOIN CONCEPT c2
			ON c2.CONCEPT_ID = ca2.ANCESTOR_CONCEPT_ID
), 
CTE_REPORT_1 AS (
	SELECT 1 AS REPORT_ORDER, 
		CAST('Stratified by ingredient' AS TEXT) as report_name,
		INGREDIENT_ID AS INGREDIENT_ID, 
		INGREDIENT_NAME AS INGREDIENT, 
		cast(null as integer) as clinical_drug_id, 
		cast(null as varchar(1)) as clinical_drug, 
		cast(null as integer) as hoi_id, 
		cast(null as varchar(1)) as hoi, 
		sum(medline_mesh_clin_trial_count) as medline_ct_count, -- Ingredient-based
		sum(medline_mesh_case_report_count) as medline_case_count, -- Ingredient-based
		sum(medline_mesh_other_count) as medline_other_count, -- Ingredient-based
		sum(ctd_chemical_disease_count) as ctd_chemical_disease_count, -- Ingredient-based
		sum(spl_splicer_count) as splicer_count, -- Drug-based
		sum(spl_eu_spc_count) AS eu_spc_count,
		sum(medline_semmed_clin_trial_count) AS SemMedDB_CT_COUNT,
		sum(medline_semmed_case_report_count) AS SemMedDB_CASE_COUNT,
		sum(medline_semmed_other_count) AS SemMedDB_OTHER_COUNT,
		sum(neg_medline_semmed_clin_trial_count) AS SemMedDB_Neg_CT_COUNT,
		sum(neg_medline_semmed_case_report_count) AS SemMedDB_Neg_CASE_COUNT,
		sum(neg_medline_semmed_other_count) AS SemMedDB_Neg_OTHER_COUNT,
		sum(aers_report_count) as aers_report_count, -- Ingredient-based
		avg(aers_report_PRR) as prr -- Ingredient-based
	FROM CTE_TRANSLATE
	WHERE INGREDIENT_EXISTS = 1
	GROUP BY INGREDIENT_ID, INGREDIENT_NAME
), 
CTE_REPORT_2 AS (
	SELECT 2 AS REPORT_ORDER, 
		CAST('Stratified by ingredient and HOI' AS text) as report_name,
		INGREDIENT_ID AS INGREDIENT_ID, 
		INGREDIENT_NAME AS INGREDIENT, 
		cast(null as integer) as clinical_drug_id, 
		cast(null as varchar(1)) as clinical_drug, 
		HOI as hoi_id, 
		SNOMED_HOI as hoi, 
		sum(medline_mesh_clin_trial_count) as medline_ct_count, -- Ingredient-based
		sum(medline_mesh_case_report_count) as medline_case_count, -- Ingredient-based
		sum(medline_mesh_other_count) as medline_other_count, -- Ingredient-based
		sum(ctd_chemical_disease_count) as ctd_chemical_disease_count, -- Ingredient-based
		sum(spl_splicer_count) as splicer_count, -- Drug-based
		sum(spl_eu_spc_count) AS eu_spc_count,
		sum(medline_semmed_clin_trial_count) AS SemMedDB_CT_COUNT,
		sum(medline_semmed_case_report_count) AS SemMedDB_CASE_COUNT,
		sum(medline_semmed_other_count) AS SemMedDB_OTHER_COUNT,
		sum(neg_medline_semmed_clin_trial_count) AS SemMedDB_Neg_CT_COUNT,
		sum(neg_medline_semmed_case_report_count) AS SemMedDB_Neg_CASE_COUNT,
		sum(neg_medline_semmed_other_count) AS SemMedDB_Neg_OTHER_COUNT,
		sum(aers_report_count) as aers_report_count, -- Ingredient-based
		avg(aers_report_PRR) as prr -- Ingredient-based
	FROM CTE_TRANSLATE
	WHERE INGREDIENT_EXISTS = 1
	GROUP BY INGREDIENT_ID, INGREDIENT_NAME, HOI, SNOMED_HOI 
), 
CTE_REPORT_3 AS (
	SELECT 3 AS REPORT_ORDER, 
		CAST('Stratified by ingredient and clinical drug' AS text) as report_name,
		INGREDIENT_ID AS INGREDIENT_ID, 
		INGREDIENT_NAME AS INGREDIENT, 
		CLINICAL_DRUG_ID as clinical_drug_id, 
		CLINICAL_DRUG_NAME as clinical_drug, 
		cast(null as integer) as hoi_id, 
		cast(null as varchar(1)) as hoi,
		sum(medline_mesh_clin_trial_count) as medline_ct_count, -- Ingredient-based
		sum(medline_mesh_case_report_count) as medline_case_count, -- Ingredient-based
		sum(medline_mesh_other_count) as medline_other_count, -- Ingredient-based
		sum(ctd_chemical_disease_count) as ctd_chemical_disease_count, -- Ingredient-based
		sum(spl_splicer_count) as splicer_count, -- Drug-based
		sum(spl_eu_spc_count) AS eu_spc_count,
		sum(medline_semmed_clin_trial_count) AS SemMedDB_CT_COUNT,
		sum(medline_semmed_case_report_count) AS SemMedDB_CASE_COUNT,
		sum(medline_semmed_other_count) AS SemMedDB_OTHER_COUNT,
		sum(neg_medline_semmed_clin_trial_count) AS SemMedDB_Neg_CT_COUNT,
		sum(neg_medline_semmed_case_report_count) AS SemMedDB_Neg_CASE_COUNT,
		sum(neg_medline_semmed_other_count) AS SemMedDB_Neg_OTHER_COUNT,
		sum(aers_report_count) as aers_report_count, -- Ingredient-based
		avg(aers_report_PRR) as prr -- Ingredient-based	      
	FROM CTE_TRANSLATE
	WHERE CLINICAL_DRUG_EXISTS = 1
	GROUP BY INGREDIENT_ID, INGREDIENT_NAME, CLINICAL_DRUG_ID, CLINICAL_DRUG_NAME
),
CTE_REPORT_4 AS (
	SELECT 4 AS REPORT_ORDER, 
		CAST('Full detail: ingredient, clinical drug, HOI' AS text) as report_name,
		INGREDIENT_ID AS INGREDIENT_ID, 
		INGREDIENT_NAME AS INGREDIENT, 
		CLINICAL_DRUG_ID as clinical_drug_id, 
		CLINICAL_DRUG_NAME as clinical_drug, 
		HOI as hoi_id, 
		SNOMED_HOI as hoi, 
		sum(medline_mesh_clin_trial_count) as medline_ct_count, -- Ingredient-based
		sum(medline_mesh_case_report_count) as medline_case_count, -- Ingredient-based
		sum(medline_mesh_other_count) as medline_other_count, -- Ingredient-based
		sum(ctd_chemical_disease_count) as ctd_chemical_disease_count, -- Ingredient-based
		sum(spl_splicer_count) as splicer_count, -- Drug-based
		sum(spl_eu_spc_count) AS eu_spc_count,
		sum(medline_semmed_clin_trial_count) AS SemMedDB_CT_COUNT,
		sum(medline_semmed_case_report_count) AS SemMedDB_CASE_COUNT,
		sum(medline_semmed_other_count) AS SemMedDB_OTHER_COUNT,
		sum(neg_medline_semmed_clin_trial_count) AS SemMedDB_Neg_CT_COUNT,
		sum(neg_medline_semmed_case_report_count) AS SemMedDB_Neg_CASE_COUNT,
		sum(neg_medline_semmed_other_count) AS SemMedDB_Neg_OTHER_COUNT,
		sum(aers_report_count) as aers_report_count, -- Ingredient-based
		avg(aers_report_PRR) as prr -- Ingredient-based
	FROM CTE_TRANSLATE
	GROUP BY INGREDIENT_ID, INGREDIENT_NAME, CLINICAL_DRUG_ID, CLINICAL_DRUG_NAME, HOI, SNOMED_HOI 
)

INSERT INTO LAERTES_SUMMARY (REPORT_ORDER, REPORT_NAME, INGREDIENT_ID, INGREDIENT, CLINICAL_DRUG_ID, CLINICAL_DRUG, HOI_ID, HOI, MEDLINE_CT_COUNT, MEDLINE_CASE_COUNT, MEDLINE_OTHER_COUNT, CTD_CHEMICAL_DISEASE_COUNT, SPLICER_COUNT, EU_SPC_COUNT, SEMMEDDB_CT_COUNT, SEMMEDDB_CASE_COUNT, SEMMEDDB_OTHER_COUNT, SEMMEDDB_NEG_CT_COUNT, SEMMEDDB_NEG_CASE_COUNT, SEMMEDDB_NEG_OTHER_COUNT, AERS_REPORT_COUNT, PRR)


SELECT REPORT_ORDER, REPORT_NAME, INGREDIENT_ID, INGREDIENT, CLINICAL_DRUG_ID, CLINICAL_DRUG, HOI_ID, HOI, MEDLINE_CT_COUNT, MEDLINE_CASE_COUNT, MEDLINE_OTHER_COUNT, CTD_CHEMICAL_DISEASE_COUNT, SPLICER_COUNT, EU_SPC_COUNT, SEMMEDDB_CT_COUNT, SEMMEDDB_CASE_COUNT, SEMMEDDB_OTHER_COUNT, SEMMEDDB_NEG_CT_COUNT, SEMMEDDB_NEG_CASE_COUNT, SEMMEDDB_NEG_OTHER_COUNT, AERS_REPORT_COUNT, PRR
FROM (
	SELECT *
	FROM CTE_REPORT_1
	UNION
	SELECT *
	FROM CTE_REPORT_2
	UNION
	SELECT *
	FROM CTE_REPORT_3
	UNION
	SELECT *
	FROM CTE_REPORT_4
) all_reports
ORDER BY INGREDIENT_ID, REPORT_ORDER, CLINICAL_DRUG_ID, HOI_ID;

COMMIT;

--COPY TABLES TO FROM PUBLIC TO the OHDSI schema
\echo 'truncating laertes tables from the OHDSI schema'
START TRANSACTION;
TRUNCATE TABLE ohdsi.drug_HOI_evidence CASCADE;
TRUNCATE TABLE ohdsi.drug_HOI_relationship CASCADE;
TRUNCATE TABLE ohdsi.LAERTES_SUMMARY CASCADE;
TRUNCATE TABLE ohdsi.evidence_sources CASCADE;
COMMIT;

\echo 'Copying relevant laertes tables from the public to the OHDSI schema so that the public webapi works'
START TRANSACTION;
insert into ohdsi.drug_hoi_relationship
select
  cast (id as varchar(50)),
  cast (drug as integer),
  cast (rxnorm_drug as varchar(4000)),
  cast (hoi as integer),
  cast (snomed_hoi as varchar(4000))
from public.drug_hoi_relationship;
COMMIT;

-- TODO: this copy will need to be corrected when the Flyway scripts
-- are updated for the WebAPI. Right now it is missing
-- coverage_start_date and coverage_end_date
START TRANSACTION;
insert into ohdsi.evidence_sources
select id,title,description,contributer,creator,creation_date,rights,source from public.evidence_sources;
COMMIT;

START TRANSACTION;
insert into ohdsi.drug_hoi_evidence
select
  cast (id as integer),
  cast (drug_hoi_relationship as varchar(50)),
  cast (evidence_type as varchar(4000)),
  cast (supports as varchar(1)),
  cast (evidence_source_code_id as integer),
  cast (statistic_value as numeric),
  cast (evidence_linkout as varchar(4000)),
  cast (statistic_type as varchar(4000))
from public.drug_hoi_evidence;
COMMIT;

START TRANSACTION;
insert into ohdsi.laertes_summary
select
  cast (id as integer),
  cast (report_order as integer),
  cast (report_name as character varying(4000)),
  cast (ingredient_id as integer),
  cast (ingredient as character varying(4000)),
  cast (clinical_drug_id as integer),
  cast (clinical_drug as character varying(4000)),
  cast (hoi_id as integer),
  cast (hoi as character varying(4000)),
  cast (medline_ct_count as integer),
  cast (medline_case_count as integer),
  cast (medline_other_count as integer),
  cast (ctd_chemical_disease_count as integer),
  cast (splicer_count as integer),
  cast (eu_spc_count as integer),
  cast (semmeddb_ct_count as integer),
  cast (semmeddb_case_count as integer),
  cast (semmeddb_other_count as integer),
  cast (semmeddb_neg_ct_count as integer),
  cast (semmeddb_neg_case_count as integer),
  cast (semmeddb_neg_other_count as integer),	
  cast (aers_report_count as integer),
  cast (prr as numeric) 
  from public.laertes_summary;
COMMIT;
\echo 'DONE Copying relevant laertes tables from the public to the OHDSI schema'

